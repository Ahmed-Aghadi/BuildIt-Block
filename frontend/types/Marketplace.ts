/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type { FunctionFragment, Result } from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
} from "./common";

export interface MarketplaceInterface extends utils.Interface {
  functions: {
    "auctionBalance(address)": FunctionFragment;
    "balances(address)": FunctionFragment;
    "bid(uint256)": FunctionFragment;
    "buyListing(uint256)": FunctionFragment;
    "calculateWinner(uint256)": FunctionFragment;
    "checkUpkeep(bytes)": FunctionFragment;
    "createListing(bool,uint256,uint256,bool,uint256,uint96)": FunctionFragment;
    "deleteListing(uint256)": FunctionFragment;
    "eth_usd_priceFeed()": FunctionFragment;
    "gasLimit()": FunctionFragment;
    "getPrice(uint256)": FunctionFragment;
    "highestBid(uint256)": FunctionFragment;
    "i_link()": FunctionFragment;
    "i_registrar()": FunctionFragment;
    "invalidateAuctionBid(uint256)": FunctionFragment;
    "isListingValid(uint256)": FunctionFragment;
    "isTrustedForwarder(address)": FunctionFragment;
    "listingCount()": FunctionFragment;
    "listingToUpkeepID(uint256)": FunctionFragment;
    "listings(uint256)": FunctionFragment;
    "onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)": FunctionFragment;
    "onERC1155Received(address,address,uint256,uint256,bytes)": FunctionFragment;
    "onERC721Received(address,address,uint256,bytes)": FunctionFragment;
    "performUpkeep(bytes)": FunctionFragment;
    "trustedForwarder()": FunctionFragment;
    "withdraw()": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "auctionBalance"
      | "balances"
      | "bid"
      | "buyListing"
      | "calculateWinner"
      | "checkUpkeep"
      | "createListing"
      | "deleteListing"
      | "eth_usd_priceFeed"
      | "gasLimit"
      | "getPrice"
      | "highestBid"
      | "i_link"
      | "i_registrar"
      | "invalidateAuctionBid"
      | "isListingValid"
      | "isTrustedForwarder"
      | "listingCount"
      | "listingToUpkeepID"
      | "listings"
      | "onERC1155BatchReceived"
      | "onERC1155Received"
      | "onERC721Received"
      | "performUpkeep"
      | "trustedForwarder"
      | "withdraw"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "auctionBalance",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "balances", values: [string]): string;
  encodeFunctionData(functionFragment: "bid", values: [BigNumberish]): string;
  encodeFunctionData(
    functionFragment: "buyListing",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "calculateWinner",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "checkUpkeep",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "createListing",
    values: [
      boolean,
      BigNumberish,
      BigNumberish,
      boolean,
      BigNumberish,
      BigNumberish
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "deleteListing",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "eth_usd_priceFeed",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "gasLimit", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "getPrice",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "highestBid",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "i_link", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "i_registrar",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "invalidateAuctionBid",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "isListingValid",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "isTrustedForwarder",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "listingCount",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "listingToUpkeepID",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "listings",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "onERC1155BatchReceived",
    values: [string, string, BigNumberish[], BigNumberish[], BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "onERC1155Received",
    values: [string, string, BigNumberish, BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "onERC721Received",
    values: [string, string, BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "performUpkeep",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "trustedForwarder",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "withdraw", values?: undefined): string;

  decodeFunctionResult(
    functionFragment: "auctionBalance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "balances", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "bid", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "buyListing", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "calculateWinner",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "checkUpkeep",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "createListing",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "deleteListing",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "eth_usd_priceFeed",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "gasLimit", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "getPrice", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "highestBid", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "i_link", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "i_registrar",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "invalidateAuctionBid",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isListingValid",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isTrustedForwarder",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "listingCount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "listingToUpkeepID",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "listings", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "onERC1155BatchReceived",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "onERC1155Received",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "onERC721Received",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "performUpkeep",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "trustedForwarder",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "withdraw", data: BytesLike): Result;

  events: {};
}

export interface Marketplace extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: MarketplaceInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    auctionBalance(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    balances(arg0: string, overrides?: CallOverrides): Promise<[BigNumber]>;

    bid(
      listingId: BigNumberish,
      overrides?: PayableOverrides & { from?: string }
    ): Promise<ContractTransaction>;

    buyListing(
      listingId: BigNumberish,
      overrides?: PayableOverrides & { from?: string }
    ): Promise<ContractTransaction>;

    calculateWinner(
      listingId: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    checkUpkeep(
      checkData: BytesLike,
      overrides?: CallOverrides
    ): Promise<
      [boolean, string] & { upkeepNeeded: boolean; performData: string }
    >;

    createListing(
      inUSD: boolean,
      tokenId: BigNumberish,
      price: BigNumberish,
      isAuction: boolean,
      auctionTime: BigNumberish,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    deleteListing(
      listingId: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    eth_usd_priceFeed(overrides?: CallOverrides): Promise<[string]>;

    gasLimit(overrides?: CallOverrides): Promise<[number]>;

    getPrice(
      listingId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    highestBid(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string, BigNumber] & { bidder: string; amount: BigNumber }>;

    i_link(overrides?: CallOverrides): Promise<[string]>;

    i_registrar(overrides?: CallOverrides): Promise<[string]>;

    invalidateAuctionBid(
      listingId: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    isListingValid(
      listingId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    isTrustedForwarder(
      forwarder: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    listingCount(overrides?: CallOverrides): Promise<[BigNumber]>;

    listingToUpkeepID(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    listings(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [
        string,
        boolean,
        BigNumber,
        BigNumber,
        BigNumber,
        boolean,
        boolean,
        BigNumber
      ] & {
        seller: string;
        inUSD: boolean;
        tokenId: BigNumber;
        price: BigNumber;
        timestamp: BigNumber;
        isValid: boolean;
        isAuction: boolean;
        aucionTime: BigNumber;
      }
    >;

    onERC1155BatchReceived(
      arg0: string,
      arg1: string,
      arg2: BigNumberish[],
      arg3: BigNumberish[],
      arg4: BytesLike,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    onERC1155Received(
      arg0: string,
      arg1: string,
      arg2: BigNumberish,
      arg3: BigNumberish,
      arg4: BytesLike,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    onERC721Received(
      arg0: string,
      arg1: string,
      arg2: BigNumberish,
      arg3: BytesLike,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    performUpkeep(
      performData: BytesLike,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    trustedForwarder(overrides?: CallOverrides): Promise<[string]>;

    withdraw(
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;
  };

  auctionBalance(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

  balances(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

  bid(
    listingId: BigNumberish,
    overrides?: PayableOverrides & { from?: string }
  ): Promise<ContractTransaction>;

  buyListing(
    listingId: BigNumberish,
    overrides?: PayableOverrides & { from?: string }
  ): Promise<ContractTransaction>;

  calculateWinner(
    listingId: BigNumberish,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  checkUpkeep(
    checkData: BytesLike,
    overrides?: CallOverrides
  ): Promise<
    [boolean, string] & { upkeepNeeded: boolean; performData: string }
  >;

  createListing(
    inUSD: boolean,
    tokenId: BigNumberish,
    price: BigNumberish,
    isAuction: boolean,
    auctionTime: BigNumberish,
    amount: BigNumberish,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  deleteListing(
    listingId: BigNumberish,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  eth_usd_priceFeed(overrides?: CallOverrides): Promise<string>;

  gasLimit(overrides?: CallOverrides): Promise<number>;

  getPrice(
    listingId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  highestBid(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<[string, BigNumber] & { bidder: string; amount: BigNumber }>;

  i_link(overrides?: CallOverrides): Promise<string>;

  i_registrar(overrides?: CallOverrides): Promise<string>;

  invalidateAuctionBid(
    listingId: BigNumberish,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  isListingValid(
    listingId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<boolean>;

  isTrustedForwarder(
    forwarder: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  listingCount(overrides?: CallOverrides): Promise<BigNumber>;

  listingToUpkeepID(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  listings(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [
      string,
      boolean,
      BigNumber,
      BigNumber,
      BigNumber,
      boolean,
      boolean,
      BigNumber
    ] & {
      seller: string;
      inUSD: boolean;
      tokenId: BigNumber;
      price: BigNumber;
      timestamp: BigNumber;
      isValid: boolean;
      isAuction: boolean;
      aucionTime: BigNumber;
    }
  >;

  onERC1155BatchReceived(
    arg0: string,
    arg1: string,
    arg2: BigNumberish[],
    arg3: BigNumberish[],
    arg4: BytesLike,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  onERC1155Received(
    arg0: string,
    arg1: string,
    arg2: BigNumberish,
    arg3: BigNumberish,
    arg4: BytesLike,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  onERC721Received(
    arg0: string,
    arg1: string,
    arg2: BigNumberish,
    arg3: BytesLike,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  performUpkeep(
    performData: BytesLike,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  trustedForwarder(overrides?: CallOverrides): Promise<string>;

  withdraw(
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  callStatic: {
    auctionBalance(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    balances(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    bid(listingId: BigNumberish, overrides?: CallOverrides): Promise<void>;

    buyListing(
      listingId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    calculateWinner(
      listingId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    checkUpkeep(
      checkData: BytesLike,
      overrides?: CallOverrides
    ): Promise<
      [boolean, string] & { upkeepNeeded: boolean; performData: string }
    >;

    createListing(
      inUSD: boolean,
      tokenId: BigNumberish,
      price: BigNumberish,
      isAuction: boolean,
      auctionTime: BigNumberish,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    deleteListing(
      listingId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    eth_usd_priceFeed(overrides?: CallOverrides): Promise<string>;

    gasLimit(overrides?: CallOverrides): Promise<number>;

    getPrice(
      listingId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    highestBid(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string, BigNumber] & { bidder: string; amount: BigNumber }>;

    i_link(overrides?: CallOverrides): Promise<string>;

    i_registrar(overrides?: CallOverrides): Promise<string>;

    invalidateAuctionBid(
      listingId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    isListingValid(
      listingId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    isTrustedForwarder(
      forwarder: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    listingCount(overrides?: CallOverrides): Promise<BigNumber>;

    listingToUpkeepID(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    listings(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [
        string,
        boolean,
        BigNumber,
        BigNumber,
        BigNumber,
        boolean,
        boolean,
        BigNumber
      ] & {
        seller: string;
        inUSD: boolean;
        tokenId: BigNumber;
        price: BigNumber;
        timestamp: BigNumber;
        isValid: boolean;
        isAuction: boolean;
        aucionTime: BigNumber;
      }
    >;

    onERC1155BatchReceived(
      arg0: string,
      arg1: string,
      arg2: BigNumberish[],
      arg3: BigNumberish[],
      arg4: BytesLike,
      overrides?: CallOverrides
    ): Promise<string>;

    onERC1155Received(
      arg0: string,
      arg1: string,
      arg2: BigNumberish,
      arg3: BigNumberish,
      arg4: BytesLike,
      overrides?: CallOverrides
    ): Promise<string>;

    onERC721Received(
      arg0: string,
      arg1: string,
      arg2: BigNumberish,
      arg3: BytesLike,
      overrides?: CallOverrides
    ): Promise<string>;

    performUpkeep(
      performData: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    trustedForwarder(overrides?: CallOverrides): Promise<string>;

    withdraw(overrides?: CallOverrides): Promise<void>;
  };

  filters: {};

  estimateGas: {
    auctionBalance(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    balances(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    bid(
      listingId: BigNumberish,
      overrides?: PayableOverrides & { from?: string }
    ): Promise<BigNumber>;

    buyListing(
      listingId: BigNumberish,
      overrides?: PayableOverrides & { from?: string }
    ): Promise<BigNumber>;

    calculateWinner(
      listingId: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    checkUpkeep(
      checkData: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    createListing(
      inUSD: boolean,
      tokenId: BigNumberish,
      price: BigNumberish,
      isAuction: boolean,
      auctionTime: BigNumberish,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    deleteListing(
      listingId: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    eth_usd_priceFeed(overrides?: CallOverrides): Promise<BigNumber>;

    gasLimit(overrides?: CallOverrides): Promise<BigNumber>;

    getPrice(
      listingId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    highestBid(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    i_link(overrides?: CallOverrides): Promise<BigNumber>;

    i_registrar(overrides?: CallOverrides): Promise<BigNumber>;

    invalidateAuctionBid(
      listingId: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    isListingValid(
      listingId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isTrustedForwarder(
      forwarder: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    listingCount(overrides?: CallOverrides): Promise<BigNumber>;

    listingToUpkeepID(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    listings(arg0: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    onERC1155BatchReceived(
      arg0: string,
      arg1: string,
      arg2: BigNumberish[],
      arg3: BigNumberish[],
      arg4: BytesLike,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    onERC1155Received(
      arg0: string,
      arg1: string,
      arg2: BigNumberish,
      arg3: BigNumberish,
      arg4: BytesLike,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    onERC721Received(
      arg0: string,
      arg1: string,
      arg2: BigNumberish,
      arg3: BytesLike,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    performUpkeep(
      performData: BytesLike,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    trustedForwarder(overrides?: CallOverrides): Promise<BigNumber>;

    withdraw(overrides?: Overrides & { from?: string }): Promise<BigNumber>;
  };

  populateTransaction: {
    auctionBalance(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    balances(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    bid(
      listingId: BigNumberish,
      overrides?: PayableOverrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    buyListing(
      listingId: BigNumberish,
      overrides?: PayableOverrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    calculateWinner(
      listingId: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    checkUpkeep(
      checkData: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    createListing(
      inUSD: boolean,
      tokenId: BigNumberish,
      price: BigNumberish,
      isAuction: boolean,
      auctionTime: BigNumberish,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    deleteListing(
      listingId: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    eth_usd_priceFeed(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    gasLimit(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getPrice(
      listingId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    highestBid(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    i_link(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    i_registrar(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    invalidateAuctionBid(
      listingId: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    isListingValid(
      listingId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isTrustedForwarder(
      forwarder: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    listingCount(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    listingToUpkeepID(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    listings(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    onERC1155BatchReceived(
      arg0: string,
      arg1: string,
      arg2: BigNumberish[],
      arg3: BigNumberish[],
      arg4: BytesLike,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    onERC1155Received(
      arg0: string,
      arg1: string,
      arg2: BigNumberish,
      arg3: BigNumberish,
      arg4: BytesLike,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    onERC721Received(
      arg0: string,
      arg1: string,
      arg2: BigNumberish,
      arg3: BytesLike,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    performUpkeep(
      performData: BytesLike,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    trustedForwarder(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    withdraw(
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;
  };
}
